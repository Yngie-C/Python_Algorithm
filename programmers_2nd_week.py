{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gym_suit(n, lost, reserve):\n",
    "    student = [x+1 for x in range(n)]\n",
    "    gym_suit = []\n",
    "    \n",
    "    for i in student:\n",
    "        if i in lost and i in reserve:\n",
    "            gym_suit.append(1)\n",
    "        elif i in lost:\n",
    "            gym_suit.append(0)\n",
    "        elif i in reserve:\n",
    "            gym_suit.append(2)\n",
    "        else:\n",
    "            gym_suit.append(1)\n",
    "    \n",
    "    for j in range(len(gym_suit)):\n",
    "        try:\n",
    "            if j == 0 & gym_suit[j] == 0:\n",
    "                if gym_suit[j+1] == 2:\n",
    "                    gym_suit[j],gym_suit[j+1] = 1,1\n",
    "            elif gym_suit[j] == 0:\n",
    "                if gym_suit[j-1] == 2:\n",
    "                    gym_suit[j],gym_suit[j-1] = 1,1\n",
    "                elif gym_suit[j+1] == 2:\n",
    "                    gym_suit[j],gym_suit[j+1] = 1,1\n",
    "        except IndexError:\n",
    "            continue\n",
    "    \n",
    "    stu_num = [1 for i in gym_suit if i != 0]\n",
    "    answer = sum(stu_num)\n",
    "    return answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solution2(d, budget):\n",
    "    sort_d = sorted(d)\n",
    "    sum_d = 0\n",
    "    list_d = []\n",
    "\n",
    "    for num in sort_d:\n",
    "        if sum_d > budget:\n",
    "            list_d.pop()\n",
    "            break\n",
    "        elif sum_d == budget:\n",
    "            break\n",
    "        else:\n",
    "            sum_d += num\n",
    "            list_d.append(num)\n",
    "    \n",
    "    answer = len(list_d)\n",
    "    return answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "metadata": {},
   "outputs": [],
   "source": [
    "def budget_num(d, budget):\n",
    "    sort_d = sorted(d)\n",
    "    sort_d.reverse()\n",
    "    init_b = 10000001\n",
    "    \n",
    "    while init_b > budget:\n",
    "        init_b = sum(sort_d)\n",
    "        if len(sort_d) != 0:\n",
    "            sort_d.remove(max(sort_d))\n",
    "            answer = len(sort_d)+1\n",
    "        else:\n",
    "            answer = len(sort_d)\n",
    "    return answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dart_try(dartResult):\n",
    "    dart_result=\"\"\n",
    "    for letter in dartResult:\n",
    "        if ord(\"0\") <= ord(letter) <= ord(\"9\"):\n",
    "            dart_result += \" \" + letter\n",
    "        else:\n",
    "            dart_result += letter\n",
    "    \n",
    "    dart_result_strip = dart_result.strip()\n",
    "    trial = dart_result_strip.split(\" \")\n",
    "    \n",
    "    for j in range(len(trial)):\n",
    "        try:\n",
    "            if trial[j] == \"1\":\n",
    "                trial.pop(j)\n",
    "                trial[j] = \"1\" + trial[j]\n",
    "        except IndexError:\n",
    "            pass\n",
    "\n",
    "    score_list = []\n",
    "    for j in range(len(trial)):\n",
    "        if trial[j][1] == \"0\":\n",
    "            if \"D\" in trial[j]:\n",
    "                score_list.append(10 ** 2)\n",
    "            elif \"T\" in trial[j]:\n",
    "                score_list.append(10 ** 3)\n",
    "            else:\n",
    "                score_list.append(10)\n",
    "        else:\n",
    "            if \"D\" in trial[j]:\n",
    "                score_list.append(int(trial[j][0]) ** 2)\n",
    "            elif \"T\" in trial[j]:\n",
    "                score_list.append(int(trial[j][0]) ** 3)\n",
    "            else:\n",
    "                score_list.append(int(trial[j][0]))\n",
    "        \n",
    "        if j == 0 and \"*\" in trial[j]: \n",
    "            score_list[0] = score_list[0] * 2\n",
    "        elif \"*\" in trial[j]:\n",
    "            score_list[j-1],score_list[j] = score_list[j-1] * 2, score_list[j] * 2\n",
    "        elif \"#\" in trial[j]:\n",
    "            score_list[j] = score_list[j] * -1\n",
    "    \n",
    "    answer = sum(score_list)\n",
    "    return answer"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
